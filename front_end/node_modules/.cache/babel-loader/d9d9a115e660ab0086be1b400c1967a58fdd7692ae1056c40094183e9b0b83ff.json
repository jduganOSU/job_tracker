{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5040'; // Change this to the URL of your backend\n\nexport const createCompany = async companyData => {\n  console.log('attempting post');\n  try {\n    const response = await fetch(`${API_BASE_URL}/company`, {\n      // Ensure the endpoint matches your backend route\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json(); // This will return the job data from the backend if successful\n  } catch (error) {\n    console.error('Failed to create company:', error);\n    throw error; // Re-throw the error if you want to handle it in the component\n  }\n};\nexport const getAllCompanies = async () => {\n  console.log('Fetching all comapnies');\n  try {\n    const response = await fetch(`${API_BASE_URL}/company`, {\n      // Ensure the endpoint matches your backend route\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json(); // This will return the job data from the backend if successful\n  } catch (error) {\n    console.error('Failed to retrieve companies:', error);\n    throw error; // Re-throw the error if you want to handle it in the component\n  }\n};","map":{"version":3,"names":["API_BASE_URL","createCompany","companyData","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","getAllCompanies"],"sources":["/Users/jackdugan/Desktop/job_tracker/front_end/src/api/companyService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5040'; // Change this to the URL of your backend\n\nexport const createCompany = async (companyData) => {\n    console.log('attempting post');\n  try {\n    const response = await fetch(`${API_BASE_URL}/company`, { // Ensure the endpoint matches your backend route\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json(); // This will return the job data from the backend if successful\n  } catch (error) {\n    console.error('Failed to create company:', error);\n    throw error; // Re-throw the error if you want to handle it in the component\n  }\n};\n\nexport const getAllCompanies = async () => {\n  console.log('Fetching all comapnies');\n  try {\n      const response = await fetch(`${API_BASE_URL}/company`, { // Ensure the endpoint matches your backend route\n          method: 'GET',\n          headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n          }\n      });\n      if (!response.ok) {\n          throw new Error('Network response was not ok');\n      }\n      return response.json(); // This will return the job data from the backend if successful\n  } catch (error) {\n      console.error('Failed to retrieve companies:', error);\n      throw error; // Re-throw the error if you want to handle it in the component\n  }\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,aAAa,GAAG,MAAOC,WAAW,IAAK;EAChDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,UAAS,EAAE;MAAE;MACxDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;IAClC,CAAC,CAAC;IACF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzCb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,UAAS,EAAE;MAAE;MACtDO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}